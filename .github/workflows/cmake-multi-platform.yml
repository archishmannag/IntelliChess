name: CMake on multiple platforms

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

jobs:
    build:
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false

            matrix:
                os: [ubuntu-latest, windows-latest]
                build_type: [Release]
                cpp_compiler: [g++, clang++, cl, x86_64-w64-mingw32-g++]
                include:
                    - os: windows-latest
                      cpp_compiler: cl
                    - os: windows-latest
                      cpp_compiler: x86_64-w64-mingw32-g++
                    - os: ubuntu-latest
                      cpp_compiler: g++
                    - os: ubuntu-latest
                      cpp_compiler: clang++
                exclude:
                    - os: windows-latest
                      cpp_compiler: g++
                    - os: windows-latest
                      cpp_compiler: clang++
                    - os: ubuntu-latest
                      cpp_compiler: cl
                    - os: ubuntu-latest
                      cpp_compiler: x86_64-w64-mingw32-g++

        steps:
            - uses: actions/checkout@v4

            - name: Set CI environment variable
              run: echo "CI=true" >> $GITHUB_ENV

            - name: Install dependencies on Linux
              if: matrix.os == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y g++ clang ninja-build cmake
                  if ! command -v pip3 &> /dev/null; then
                    sudo apt-get install -y python3-pip
                  fi
                  pip3 install conan

            - name: Install dependencies on Windows with MSVC
              if: matrix.os == 'windows-latest' && matrix.cpp_compiler == 'cl'
              run: |
                  choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
                  choco install ninja
                  choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive --norestart"
                  if (Get-Command pip -ErrorAction SilentlyContinue) { 
                    echo "pip is already installed" 
                  } else { 
                    echo "Installing pip" 
                    Invoke-WebRequest -Uri https://bootstrap.pypa.io/get-pip.py -OutFile get-pip.py 
                    python get-pip.py 
                  }
                  refreshenv
                  pip install conan

            - name: Install dependencies on Windows with MinGW
              if: matrix.os == 'windows-latest' && matrix.cpp_compiler == 'x86_64-w64-mingw32-g++'
              run: |
                  choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
                  choco install msys2
                  choco install ninja
                  refreshenv
                  C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm"
                  C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-toolchain"
                  echo "C:/tools/msys64/mingw64/bin" >> $GITHUB_PATH
                  refreshenv
                  if (Get-Command pip -ErrorAction SilentlyContinue) { 
                    echo "pip is already installed" 
                  } else { 
                    echo "Installing pip" 
                    Invoke-WebRequest -Uri https://bootstrap.pypa.io/get-pip.py -OutFile get-pip.py 
                    python get-pip.py 
                  }
                  refreshenv
                  pip install conan

            - name: Set reusable strings
              id: strings
              shell: bash
              run: |
                  echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

            - name: Configure Conan
              run: conan profile detect

            - name: Install dependencies with Conan
              run: conan install ${{ github.workspace }} --build=missing

            - name: Build
              run: |
                  conan build ${{ github.workspace }}

            - name: Test
              if: success()
              working-directory: ${{ steps.strings.outputs.build-output-dir }}
              run: ctest --build-config ${{ matrix.build_type }} --output-on-failure